/**
 * @private
 */
export interface SdkMessage<DataType, EventType> {
    type: 'MESSAGE' | 'RESPONSE';
    source: string;
    eventName: EventType;
    key: string;
    date: number;
    data?: DataType;
    isOk: boolean;
}
/**
 * @private
 */
export declare class Messaging<MessageResponseTypes, IncomingMessageTypes> {
    protected handshakeData: Record<string, any>;
    protected recipient?: Window | null;
    protected thisSourceName: string;
    protected expectedIncomingSourceName: string;
    constructor(sourceName?: string, incomingSourceName?: string);
    private _queue;
    private _messageHandler;
    /**
     * Sends a message to partner. If `waitForResponse=true` resolves or rejects only when response is received.
     */
    protected sendMessage<DataType, EventNameType extends keyof MessageResponseTypes>(type: EventNameType, data?: DataType, messageKey?: string, waitForResponse?: boolean): Promise<MessageResponseTypes[EventNameType]>;
    private messageHandler;
    protected setupMessaging(): void;
    protected destroyMessaging(): void;
    protected sendResponse<T extends keyof IncomingMessageTypes>(eventName: T, key: string, { isOk, data }?: {
        isOk: boolean;
        data?: IncomingMessageTypes[T];
    }): void;
    protected handleMessage(message: SdkMessage<unknown, unknown>): void;
}
